import { RuleViolations } from './utils';


const comments = `// üö® DO NOT EDIT THIS FILE MANUALLY! üö®
// Run \`pnpm eslint-migration-plan\` to update or remove this file if all rules pass.
// For details, refer to: tools/scripts/eslint-migration/README.md`;
const targetEslintRc = (
  module: 'commonjs' | 'cjs' | 'mjs' | 'module' | 'esm' = 'commonjs'
) =>
  module === 'esm' || module === 'mjs'
    ? `
import nextEslintConfig from './eslint.next.config';

${comments}
export default [
  ...nextEslintConfig,
  <RULES>
];

`
    : `
const nextEslintConfig = require('./eslint.next.config');

${comments}
module.exports = [
  ...nextEslintConfig,
  <RULES>
];

`;

const DEFAULT_INDENT_LEVEL = 6;

export function formatRules(
  rules: Record<string, RuleViolations>,
  {
    indentLevel = DEFAULT_INDENT_LEVEL,
    type = 'error',
  }: {
    indentLevel?: number;
    type?: 'error' | 'warning';
  } = {}
): string[] {
  const icons = { error: '‚ùå', warning: '‚ö†Ô∏è' };

  return Array.from(Object.entries(rules))
    .sort(([ruleA, [countA, fixableA]], [ruleB, [countB, fixableB]]) => {
      // Sort by fixable (fixable first)
      if (fixableA !== fixableB) return fixableB ? 1 : -1;
      // Sort by number of issues (descending)
      if (countB !== countA) return countB - countA;
      // Sort alphabetically by rule ID
      return ruleA.localeCompare(ruleB);
    })
    .map(
      ([ruleId, [count, isFixable]]) =>
        `${' '.repeat(indentLevel)}"${ruleId}": "off", // ${
          icons[type]
        } ${count} ${type}${count > 1 ? 's' : ''}${isFixable ? ' üõ†Ô∏è' : ''}`
    );
}

export function getFile(
  ruleDefinitions: {
    files: string[];
    errors: Record<string, RuleViolations>;
    warnings: Record<string, RuleViolations>;
  }[],
  {
    module = 'commonjs',
    indentLevel = DEFAULT_INDENT_LEVEL,
  }: { module: 'commonjs' | 'module' | 'cjs' | 'mjs'; indentLevel?: number }
): string {
  const configTemplate = targetEslintRc(module);
  const intent = ' '.repeat(indentLevel);
  const formattedRules = ruleDefinitions
    .filter(
      ({ errors, warnings }) =>
        Object.values(errors).length > 0 || Object.values(warnings).length > 0
    )
    .map(({ files, errors, warnings }) => {
      const warningLines = formatRules(warnings, { type: 'warning' });
      const errorLines = formatRules(errors);
      const fileLines = JSON.stringify(files).replace(/"/g, "'");
      const errorRules = `\n${intent}// ‚ùå Errors: ${
        errorLines.length
      }\n${errorLines.join('\n').replace(/"/g, "'")}`;
      const warningRules = `\n${intent}// ‚ö†Ô∏è Warnings: ${
        warningLines.length
      }\n${warningLines.join('\n').replace(/"/g, "'")}`;

      return `{
    files: ${fileLines},
    rules: {${errorLines.length > 0 ? errorRules : ''}${
        warningLines.length > 0 ? warningRules : ''
      }
    },
  },`;
    })
    .join(',\n');

  return configTemplate.replace('<RULES>', formattedRules);
}
